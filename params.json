{"name":"Google Authenticator Rails","tagline":"Ruby gem to implement Google's MFA authenticator","body":"# GoogleAuthenticatorRails\r\n\r\n[![Gem Version](https://badge.fury.io/rb/google-authenticator-rails.png)](http://badge.fury.io/rb/google-authenticator-rails)\r\n[![Build Status](https://secure.travis-ci.org/jaredonline/google-authenticator.png)](http://travis-ci.org/jaredonline/google-authenticator)\r\n[![Code Climate](https://codeclimate.com/github/jaredonline/google-authenticator.png)](https://codeclimate.com/github/jaredonline/google-authenticator)\r\n\r\nRails (ActiveRecord) integration with the Google Authenticator apps for Android and the iPhone.  Uses the Authlogic style for cookie management.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'google-authenticator-rails'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install google-authenticator-rails\r\n\r\n## Usage\r\n\r\nExample:\r\n\r\n```ruby\r\nclass User\r\n  acts_as_google_authenticated\r\nend\r\n\r\n@user = User.new\r\n@user.set_google_secret           # => true\r\n@user.google_qr_uri               # => http://path.to.google/qr?with=params\r\n@user.google_authentic?(123456) # => true\r\n```\r\n\r\nGoogle Labels\r\nWhen setting up an account with the GoogleAuthenticator you need to provide\r\na label for that account (to distinguish it from other accounts).\r\n\r\nGoogleAuthenticatorRails allows you to customize how the record will create\r\nthat label.  There are three options:\r\n  - The default just uses the column \"email\" on the model\r\n  - You can specify a custom column with the :column_name option\r\n  - You can specify a custom method via a symbol or a proc\r\n\r\nExamples:\r\n\r\n```ruby\r\nclass User\r\n  acts_as_google_authenticated :column => :user_name\r\nend\r\n\r\n@user = User.new(:user_name => \"ted\")\r\n@user.google_label                      # => \"ted\"\r\n\r\nclass User\r\n\tacts_as_google_authenticated :method => :user_name_with_label\r\n\r\n\tdef user_name_with_label\r\n\t  \"#{user_name}@example.com\"\r\n\tend\r\nend\r\n\r\n@user = User.new(:user_name => \"ted\")\r\n@user.google_label                    # => \"ted@example.com\"\r\n\r\nclass User\r\n\tacts_as_google_authenticated :method => Proc.new { |user| user.user_name_with_label.upcase }\r\n\r\n\tdef user_name_with_label\r\n\t  \"#{user_name}@example.com\"\r\n\tend\r\nend\r\n\r\n@user = User.new(:user_name => \"ted\")\r\n@user.google_label                    # => \"TED@EXAMPLE.COM\"\r\n```\r\n\r\nYou can also specify a column for storing the google secret.  The default is `google_secret`.\r\n\r\nExample\r\n\r\n```ruby\r\nclass User\r\n\tacts_as_google_authenticated :google_secret_column => :mfa_secret\r\nend\r\n\r\n@user = User.new\r\n@user.set_google_secret\r\n@user.mfa_secret \t\t # => \"56ahi483\"\r\n```\r\n\r\nYou can also specify which column the appropriate `MfaSession` subclass should use to look up the record:\r\n\r\nExample\r\n\r\n```ruby\r\nclass User\r\n  acts_as_google_authenticated :lookup_token => :salt\r\nend\r\n```\r\n\r\nThe above will cause the `UserMfaSession` class to call `User.where(:salt => cookie_salt)` or `User.scoped(:conditions => { :salt => cookie_salt })` to find the appropriate record.\r\n\r\nYou can also specify a name for the 'issuer' (the name of the website) where the user is using this token:\r\n\r\nExample\r\n\r\n```ruby\r\nclass User\r\n  acts_as_google_authenticated :issuer => 'your_site.com'\r\nend\r\n```\r\n\r\nBy this way your user will have the name of your site at the authenticator card besides the current token.\r\n\r\n## Sample Rails Setup\r\n\r\nThis is a very rough outline of how GoogleAuthenticatorRails is meant to manage the sessions and cookies for a Rails app.\r\n\r\n```ruby\r\nGemfile\r\n\r\ngem 'rails'\r\ngem 'google-authenticator-rails'\r\n```\r\n\r\nFirst add a field to your user model to hold the Google token.\r\n```ruby\r\nclass AddGoogleSecretToUser < ActiveRecord::Migration\r\n  def change\r\n    add_column :users, :google_secret, :string\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\napp/models/users.rb\r\n\r\nclass User < ActiveRecord::Base\r\n  acts_as_google_authenticated\r\nend\r\n```\r\n\r\nIf you want to authenticate based on a model called `User`, then you should name your session object `UserMfaSession`.\r\n\r\n```ruby\r\napp/models/user_mfa_session.rb\r\n\r\nclass UserMfaSession <  GoogleAuthenticatorRails::Session::Base\r\n  # no real code needed here\r\nend\r\n```\r\n\r\n```ruby\r\napp/controllers/user_mfa_session_controller.rb\r\n\r\nclass UserMfaSessionController < ApplicationController\r\n  \r\n  def new\r\n    # load your view\r\n  end\r\n\r\n  def create\r\n    user = current_user # grab your currently logged in user\r\n    if user.google_authentic?(params[:mfa_code])\r\n      UserMfaSession.create(user)\r\n      redirect_to root_path\r\n    else\r\n      flash[:error] = \"Wrong code\"\r\n      render :new\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\n```ruby\r\napp/controllers/application_controller.rb\r\n\r\nclass ApplicationController < ActionController::Base\r\n  before_filter :check_mfa\r\n\r\n  private\r\n  def check_mfa\r\n     if !(user_mfa_session = UserMfaSession.find) && (user_mfa_session ? user_mfa_session.record == current_user : !user_mfa_session)\r\n      redirect_to new_user_mfa_session_path\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nBy default, the cookie related to the MfaSession expires in 24 hours, but this can be changed:\r\n```ruby\r\nconfig/initializers/google_authenticator_rails.rb\r\n\r\nGoogleAuthenticatorRails.time_until_expiration = 1.month\r\n```\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\nMIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}